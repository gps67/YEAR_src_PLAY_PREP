	BENCH/
	BENCH.txt

Each project has a BENCH, to edit the VFS within the GIT archive

The BENCH project itself has a BENCH, for its shared SRC_POOL LIBR

A BENCH might be a collection of TCL or ES6 scripts, with a GUI

A BENCH should produce DOCS for the Module_s it works on

	VFS_TREE

	 dir_OVER
	 dir_TOP
	 dir_LOCN
	 dir_ITEM

	With DRUM == DRUM_git_ONE

	 regen into from sqlite tree

	 	regen ADIR --LINK--> A_DIR
	 	regen FILE --LINK--> DIR_FILE_EXPR

		group of AVAR items in VAR_POOL_one
		group of AVAR items in VAR_POOL_two

		group of AVAR items in VAR_POOL_ZERO is VAR_POOL in CXX SESS
		group of AVAR items in VAR_POOL_M1 is API_to_VAR_POOL
		group of AVAR items in VAR_POOL_idx is API_to_VAR_POOL_idx

			CT_RT API uses idx_TABLE = EXPR ...
	
	 group and sort

		DIR_one
		DIR_two 
		
		as_one_two
		as_two_one

		as_PICK_from_EXPR ... fundamentals to BENCH reapplied to SYNTAX
	
	group_and_sort

		DIRNAME is generated %02d_%s_%s idx LHS RHS
		DIRNAME is generated     _%s_%s idx LHS RHS
		DIRNAME is generated SWAP_LHS_RHS // flag in OPCODE or CT_RT
	
	group_and_sort

		add_headline

			on_group_change_GEN_headline() { SCRIPT }

		SLACK
		 partial regen
		  when chapter is edited, 
		  do not regen entire document
		  just annotate the change in page count
		  just annotate the origin of the change
		  just annotate the rest

		KNOW REGEN_ENTIRE_WEEKLY

BENCH_VFS

	It makes sense to have a VFS generated by BENCH
	It makes sense to have a ROM VFS generated in FILES

	LOCN is associated with DIR_of_LOCN

		LOCN creates a list of objects in .here_db_file_section

		ELF manifests those as SEGMENTS

		C32 manifests them as MMAP_ROM _RAM _RW _STO _SESS ...

			ie an esp32 without an MMAP 
			simply loads them all in memory
			uses EA_BASE is_a_TOKEN_used_via_CALL
			then somehow loaded on demand into memory

			RTOS might make FLASH appear as 4G ROM
			we might load all file at once // MINI_MACHINE _micro
	
	LOCN has BENCH helper

		LOCN provides call_back_helps to generic BENCH_LOCN_HELPER

		mk_ITEM_of_SPEC

			STO is SESS_TEMP
			STO is SESS_KEEP_STO_one
			STO is SESS_KEEP_STO_two
			STO is SESS_KEEP_STO_API

		CT_RT _one _two are files called "LOCN/KEEP_STO_one"

			ABBR %s for %s
			ABBR _%s for %s
			PARSE_DUNDER _%s
			ABBR _one for LOCN_KEEP_STO_one
			ABBR LOCN_KEEP_STO_one for LOCN/KEEP_STO_one
			ABBR LOCN for _LOCN_OVER_step_LOCN_HERE
	
		mk_ITEM of SPEC

			SPEC {
				ITEM is entry in calendar
			}

			SPEC {
				ITEM is PIOMAS data and graphs and ETC
			}

			SPEC {
				ITEM is CET2 data parser and a few VIEWS
			}


			Each uses CXX class tree to derive from similar
			Each class generates bunch of files using %s _ANARG_

			VFS of DIRS and FILES is matched by NAMESPACE DECL SPEC

				ie Module += NameSpace

			PIOMASS.DATA_STO.time_series_data.META {

				T0 = DATE_TIME_1980_ish

				DT = DT_ONE_365_th_of_space_year
				DT = DT_ONE_space_day // not an earth day
				DT = DT_ONE_earth_day // not your grans day

				N = N_should_match_Array_NBYTES

				T2 = T1 + DT * N // common RULE expect know

				UNIT = million km3
				UNIT as FLOAT_32 // plenty for 9.2345

				bool_OK = idx_of_T1( t1 ) {
				CT	RET_VAL += PASS_FAIL_with_number_RET
				CT	RET_VAL is INT by THROW on FAIL
				CT	RET_VAL += {
					( PASS VALUE }
					( FAIL DIAG }
				}
					// auto TYPE_OF T1 //
					int idx = FLOAT_to_INT( (t1 - T0) / DT )
					if(idx < 0 ) { ... }
					if(idx >= N) { ... }
					RET_VAL = idx
				}

			}


		CT_RT WASM 

			OPTION compile CXX into WASM to get CXX type behaviour
			gen c++ code, compile to C32 or WASM or ...

			use WEBGL to DRAW_VIEW

				JS_API from within WASM_BOX is jagged
				but it works well enough, and optimisable
				put request list into a queue, in Byte_ARray
				single API context switch back to JS
				parse queue, drawing VIEW


			Modern C++ provides CT_RT init PRE_LOAD

				DATA is PRE_LOAD
				DATA is STO_LOAD // STO_SAVE //

				update BIOS_SETTING with DAILY_CACHE
				update BIOS_DATA with WEEKLY_REBUILD

				REGEN_this_second_NOW

			CT_RT on web server only needs to run after code edit

				Android App install recompiles
				Node Publish App recompiles rebuilds
				Node Adjust App relinks from pre-built

	
