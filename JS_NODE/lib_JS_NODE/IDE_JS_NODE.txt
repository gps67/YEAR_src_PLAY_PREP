
 TODO

	WE run NODE and all its common libraries, then npm
	We GEN JS to performs the ON_EVENT_ACTIONS

	We WRAP a list of JS_API // sqlite aes_filters MINI_MACHINE_API
	We run V8 because of NODE, but could easily be non_NODE non_V8

	We PARSE CXX to GEN JS // initial SUBSET // reflect regen CACHED and RT
	We leave so many shortcuts, eval on first use, precompile ROM,
	We use DIRECT_CALL_ARGV into VECTOR
	We use CACHED_ITEM_GET_EA_as_NAME_STR0

		CXX => JS_NODE

	We hand craft JS that uses our extended LIBR API

	We grow more JS TEMPLATES into CXX, captures, KEPT_VARS, call with DATA
	Usual list of JS idioms, including unwrapped direct use of JS API

		CXX => JS_NODE ;# TEMPLATES list grows ...
	
	On mobile, run a local STATIC server
	On mobile, run a local FULL_ish SQL storage 

 TASK == GW
 TASK == STO
 TASK == VPN
 TASK == REM

 TASK == STO_sqlite_batch_run // guarantee all locks on file // 
 TASK == STO_CXX_batch_run_sqlite_batch_run // prepare_all_used_EXPRS
 TASK == STO_family_geneology_tree + non_family_limited_data
 TASK == STO_todo
 TASK == STO_contacts
 TASK == STO_calender

 	WMAN ZOOM_PICK_ALL_WINDOWS {
		this is usable for when a window is HIDDEN
		the ZOOM_PICK restores it as it was will be
		that enables minimise ALL windows # keep cache
	}

	IDE_JS_NODE.txt

		we are running SITE JS_SCRIPT over SQLITE_STO
		we are running SITE JS_SCRIPT over STO_MMAP SQLITE_STO
		STO STO_not_sql // none of them were // basic obj.field API
		STO SQL_sqlite
		STO SQL_postgres
		STO SQL_mariadb
		STO SQL_MSQL
		STO SQL_MMAP // AQL_API is CALL_SELECT_STAR_WHERE_PICK_ // _SORT
		STO SQL_MMAP // requires an SQL decoder to provide the DIALECT
		STO SQL_STO // segment_16_MEGA_BYTE // 16_MEGA_WORD // 128M //
		STR OBJ_IDX ARGV comes with LEX_POOL // STR0_VAL = "%s" //

		JSON needs to provide a base platform

			serialiser OUT
			PARSER '{ CALL LOAD }' // LOAD_DATA_FROM_SCRIPT
			 LOAD_JSON == PARSE_JSON += CALL_mk_data_item_as_VAR

		// that implements TOKEN as VAR 
		// so a script that originally ran on a fixed TOKEN is "VAL"
		// VAL == "VAR" // unknowable levels of bounce // mutual ALIAS
		// 

		PARSE_SCRIPT_JSON

			we are not implementing ES
			we are running under V8 JS with NODE and LIBR 
			we are running under SM JS with UDEF and LIBR
			we are not running under CXX // other than it's GEN_JS
			we can add support for CXX // COMPILER KIT // CTRT

		MMAP needs to provide a base platform

			use C or CXX or ASM or MACROS

			create a DATASET often single ITEM

			DECL STRUCT ...
			SPEC nbytes
			SPEC of STRUCT in NBYTES at EA_EXPR

			CLASS ... FIELDS ... ACCESSORS ... METHODS ... CODE
			STRUCT ... FIELDS ... ACCESSORS ... METHODS ...
			ARRAY [ IDX ] of ITEM_TYPE VARNAME("%s")
			MATCH %s 
			MATCH "%s"
			MATCH "\"%s\"" // VIEW_AS for_REASON

			EA = BASE + OFFS
			EXPR = EXPR

			when does parameter change ?
			presumed NEVER // cache CT_RT CT
			presumed ALREADY  // cache CT_RT RT
			presumed _MIDMAY //  cache CT_RT RT // expect DATA changes
			// VOLATILE often collapses when BATCH_RUN_STEP //
			// ie BIND LOCK TOKENISE TELL_update

			basically SCRIPT is permitted SEGMENT it can change
			write back happens as a BATCH STEP
			remote cached predictions will CODE OUT
	
	We can do almost anything with JS_LIBR
	We can GEN JS that calls JS_LIBR according to API
	Loaded data is current pages of STO_api 
	Loaded data is OFFS within container STREAM // XPOS //
	// XPOS will get future BLINK services from SCRIPT // CODE_POINT //
	// ie it can use what it provides // as a DIALECT of USAGE //

 JS_NODE

 	we are using NODE

	so that means V8 and NPM or some local RESPIN NODE_like NODE_UDEF
	so we can do that awful npm chaos
	or just be us, and export our own PARSED ROM_CODE_API

	NODE means those facilities NODE has already bundled in
	NODE is a choice that adds LIBR_builtin 

	we dont depend on anything beyond JS and NODE

 JS NODE
 	
	we are using JS
	we dont depend on anything beyond JS and NODE
	we can depend on ...

	initial offering is OBJECT VAR_POOL 
	initial offering adds SPEC reflection from CODE_POINT
	initial offering adds CXX reflection from CODE_POINT

	initial offering is OBJECT VAR_POOL currently in DB_SEGMENT

		option we create a VFS to simulate DB FILE into SEGMENT
		it detects TAIL_WRITE
		it detects PAGE_WRITE
		it writes back modified pages // LOCK_STEP MINI_MACHINE

		option use a prediction REMOTE cache for OBJECTS held REMOTE
		because we use '{ VAL=="VAR" }' // TOKEN DECL // PARSED //

 GEN SCRIPT

 	we offer a basic DATA and CALL API
	we write scripts that run through to completion, under LOCK unbrella
	then returns the SQLITE datafile to the servers other callers (NONE)
	GETTER 
	GEN code that uses a simple subset, as a GETTER / SETTER

 PARSE_SCRIPT

 	CXX using JS_NODE and various modules
	basic calls, specific data actions
	basic data, CSR.spec.field
	foreach closure try_catch JS_DIALECT brings wide macro templates
	// presume TEMPLATE creates




 	LOCK unbrella
	SAMPLE DATA source 
	probably an SQLITE ROW in TABLE via IDX

	DATA values appear as STREAM of DATA ITEMS
	DATA values appear as STREAM of DIALECT DATA ITEMS
	ALIAS DIALECT ALIAS
	DIALECT ITEM = STO_for_obj_in_mem_via_IDX // IDX == "VAR_NAME" // "IDX"

	What is run is entirely JS that any BROWSER can take a punt on
	What is run is entirely JS that BROWSER can recognise MATCH_USAGE "%s"
	BENCH is where that is visible

	So we GEN plain ES6 _PLUS
	So we GEN plain ES6 _PLUS _LIBR JS_LIBR_API

	CT has it almost all covered, but the runtime can choose to EVAL
	one of two precompiled SCRIPTS

		if MATCH_STR0 "%s" {
		// CIDENT HERE "%s"
		// ALIAS "VAR_NAME_ANYSTR" // ALIAS "_STR0"
		// PARSER 'ALIAS' appeared not in Q2 // USAGE CHECK_NO_NEED //


		 GEN Q2_varname_Q2 {
			 MATCH Q2_varname_Q2 // via GEN C_code "VAR"
			 MATCH Q1_varname_Q1 // via FLEXI EVAL_over_EXPR
			 MATCH    varname
		  +=
		  	QUOTED "VARNAME" => VARNAME

				creates a VAR to hold TOKEN("SPELLING")
				SPELLING("'VARNAME'") // Q1 used in CODE_POINT
				SPELLING("VARNAME") // no Q1 just STR0

		  	QUOTED "ALIAS" => NAME

				STR0 NAME = "NAME";
				STR0 NAME = "STR0";
				STR0 NAME = "ALIAS";

		 }

		}


