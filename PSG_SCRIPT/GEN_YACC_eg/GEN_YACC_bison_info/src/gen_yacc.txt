/*
	not sure I think CODE_HERE == UDEF // AUTO_CAST_via_POOL_ONE _TWO 
	merged vars %s.field for TYPE_CAST "{ XPOS_t & XPOS }"

 SEE: already need for multiple parameters to BASE_CLASS

 	THe OOP thing keeps the THIS as a local centre XPOS_ZERO_PLUS_i32_OFFS
	// small file limit 2G 
	// OFFS_i32_MINUS 
	// OFFS_i32_ZER0
	// OFFS_i32_PLUS
	//
	// or SORT by L_to_R MINUS_to_PLUS _LIMITS_i32
	// or SORT by TOP_to_BOTTOM 
	// or SORT by BOTTOM _to_TOP // HEAP += ITEMS "{ BOTTOM TOP L M R }"
	// or SORT by BOTTOM _to_TOP // HEAP += ITEMS "{ idx i32 i32_idx_t TOP L M R }"
	// typedef %s %s_t; // not using "_t" is using "%s" as TYPE_NAME
	// MATCH INVERT mention maybe sarcastic or aside
	// EXPECTED_USAGE if_MINUS( AVAR_numeric ) // provides usable BASE_CLASS
	// EXPECTED_USAGE AVAR_numeric   AVAR_numeric_t %s
	// ARGV is PHRASE is SEGMENT of ARGV_from_STREAM or BRANCH_of_TREE
	// STO is HEAP.ITEM.STO_API
	// PROGRAMMABLE behaviour, with AUTO_CTOR NULL then VALUE and CONST
	// it permits CACHE to boot_strap without strange behaviour
	// LIBR provides ITEM.STO.API = ITEM_STO_API //  MERGED to 1 SPELLING
	// THEME_ THEME = CTOR "SCRIPT" // COMPILE AND KEEP as EXPR for CELL
	// THIS.VALUE // is AVAR is CGI_FUNC_GETTER_and_CT_RT_info
	// CT_RT THIS += upgrade TYPE_INFO for CACHE_ITEM to NEW_TYPE_INFO
	// NEED archive OLD_VAL // COMPILER exports this to ALREADY DONE CACHE
	// NEED archive NEW_VAL // CT_RT provides NEW_VAL = NEW_TYPE_INFO
	// EXTRA
	// DROP_or_ignore_if_there_or_LOOK_if_there
	// PERMIT_RW_ACCESS_of_SESS_SELF // add_field rewrite_own_SPEC
	// EXPECTED_USAGE AVAR_numeric_t _value = INIT_VAL -or- CTOR_ARGS
	// CTOR is a WELL_KNOWN "CTOR" or possibly "CTOR_two"
	// ELF allows any C_FUNC addr, but we MATCH FUNC_prototype _and_ARGS
	// DIALECT allowed SP _and_ARGS EOLN // in SCRIPT EOLN matches CMNT_EOLN
	// DIALECT MATCH STRENGTH // EOLN or OTHER // ";# CMNT EOLN"
	// DIALECT MATCH STRENGTH // EOLN or OTHER // "// CMNT EOLN"
	// DIALECT MATCH STRENGTH // EOLN or OTHER // "/* CMNT    EOLN" // FLAG
	// DIALECT MATCH STRENGTH // EOLN or OTHER // "/* CMNT */ EOLN"
	// FLAG // depth_in_comment_ = FSM.STATE // FSM = FSM_COMMENTS_EOLN
	// EOLN // auto triggered by CALLER, on_EOLN(), LIMIT_call_once_then
	// ONCE // a flag that counts how many times called // ROM can OK_AS_IS
	// CTOR // if CT_RT_ahead_of_time_asif_run, but not yet called
	// STATE UNSET -> ZERO_from_INIT_MEM_to_ZERO // OPTION WHAT IF NOT
	// STATE UNSET -> ZERO -> INIT_VAL -> VALUE_one // CALC EXPR in advance
	// RET_VAL VALUE_one
	// STATE ZERO -> _one from INIT_ROM_to_VALUE_one
	// STATE ZERO -> _two from INIT_ROM_to_VALUE_two
	// ALIAS _ZERO _NULL // VALUE_NULL // MERGE M1 // PLUS NBIT
	// PLUS u7 u15 u31 u63 // can use i8 to hold u7
	// PLUS u8 u16 u32 u64 // can KNOW MINUS_ZERO_PLUS and BITFIELD_16
	// KNOW i16 is u15 PLUS WITH i16_MINUS 
	// OPTION MINUS_256 is MINUS_100_is_ZERO // when in BYTE 
	// BYTE_PAIR /* print as 4 bit lex */ 1111 1111 0000 0000 // HIGH LOW !!
	// BYTE_PAIR // LOHI //  0000 0000 1111 1111 // asif MINUS upto infinty
	// BYTE_one // LOHI // 0000 0000 // appears same as ZERO == 256 == -256
	// PICK -256 ZERO +256 // 
	// PICK -128 ZERO +128 // +127 is MAX_u7 // +128 is on_EVENT // or ARP
	// PAGE_LINE after [256] is next PAGE // some real_world_model here
	// PAGE_ITEM //
	// PAGE_ITEM_EXPR // might be in CODE_POINT // and be PRE_COMPILED
	// SAFE ACTION is BENCH POPUP HELPFUL MENU += DECODE( PAGE ITEM EXPR )
	// DECODE == COMPILE == EXEC == PRE_LOAD == CACHE_COUNT
	// CACHE += USAGE n_reads per minutes as f32
	// CACHE += USAGE most_recently_read_at_time_as_f64
	// TIME uses BC1 GAP AD1 // GAP == ZERO // M1 == BC1 // _one == [1]
	// _two == [2]
	// _idx == [idx] // u16_idx but LIBR switches early to u31
	// u15_idx == [idx] // u15_idx from OPCODE and ARGS // u31_to_ARRAY
	// u31_idx == i32_from_u16_idx // _PLUS but CORRECTLY SIGNED // 
	// u32_idx == u32_from_u15_idx // KNOW ZERO SIGNED // ZERO_or_PLUS
	// but LIBR switches early to u31 // eg for u23 and u24 and u16 and u15
	// OPCODE of the INPUT ARG might have already found MINUS_ZERO_PLUS
	// MINUS // i32_MINUS // i15_MINUS //


	// so no need for PARSER to DEMAND EOLN


	//
	// OFFS_i32_PLUS
	// OFFS_i32_ZER0
	// OFFS_i32_MINUS 

	AUTO_API treats OBJ * PTR }" as "{ OBJ & PTR }" // COIN_SIDE //
	// COIN_SIDE is simply A_or_B _xor_maybe "{ ONE TWO }"
	// COIN_SIDE is simply A_or_B _xor_maybe "{ NAME STR0 }"
	// COIN_SIDE is simply A_or_B _xor_maybe "{ NAME DATA }"
	// COIN_SIDE is simply A_or_B _xor_maybe "{ NAME EXPR }"
	// COIN_SIDE is simply A_or_B _xor_maybe "{ IDX "IDX" }" // VAR_int_IDX
	// SCOPE wraps all invocations as REPEATED_MACRO_PHRASE _and_EXPR_API
	
	something for you to sort out over winter puzzles
	MINI_MACHINE works via making CACHE run
	CACHE_of_MINI_MACHINE API_RELAY _API_FILTER _API_ACTION _API_DECL
	API_uses a shared TABLE_of_OBJ_LOCN[idx_obj] // ALIAS "obj.get_LOCN()"
	// ALIAS "obj.get_LOCN()"
	// ALIAS "obj.get_%s(STR0)"
	// ALIAS "obj.get_EA_%s(STR0)"
	// GCC and probably LLVM check fmt strings // this helps
	// we apply our own FILTER # check percent USAGE #
	// PSG reports percent usage with its custom counter flags
	// set COUNTER.subfield("%s").plus_plus("%s.field++")
	// BASH_LINE is not bash it is a single LINE called from BASH # ARGV
	// BASH_LINE_PARSE uses CIDENT_a1_a2_star_SPELLING // of_ITEM

	HOME_WORK_TASK

	find the C demo code in the bison.info file
	make it compile from Makefile
	run build a tree of PARSED SCRIPT LINES and WORDS
	run sweep over TREE # possibly at runtime via CALL_on_EVENT ARGV # api
	load PSG from handwritten CXX code that builds PSG tree

		ARGV looks like BASH with heavy use of "VAR_NAME" Q2
		GEN Q1 quoted code 
		GEN Q2 quoted code 
		GEN Q8 parsed CSET_DESC # words for ASCII through BASH 
		# ASCII MATCH [ ] { } ( ) << >> += %s LEX MATCH ASCII
		# ASCII MATCH ASCII [ ] { } ( ) << >> += %s LEX MATCH ASCII
		# ASCII MATCH UTF { sweep_font_segments_and_pick_out_items "a2"
		# MATCH ("a2_of_a1_a2_star") # AUTO OPTION :-) # PARSE "VAR_NAME")
		# PARSE "VAR_NAME")
		# PARSE "EXPR")
		# PARSE "PHRASE")
	
	PRE_RUN with DATA_SET_ NONE CODE_POINT_AVAIL_from_API // THERE UNFETCHED
	PRE_RUN with DATA_SET_ _ONE DATA_SET_ _TWO

	API_FETCHED_VAR # on_USE run CODE A AR G S # return AS RET_VAR("WA_VAR")
	API_EA # we are using STR0 * EA_CODE_POINT = "EA_VAR_OBJ" // "CSR_ONE"
	API_EA # we are using STR0 * EA_CODE_POINT = "EA_EXPR_VAR_OBJ" // "CSR_ONE"
	API_EA_EXPR # CT_RT cas compiled SCRIPT into ARGV CALLS to CXX funs
	API_EA_EXPR # CT_RT CT_RET_VAL_KNOWN_xFFFF EA_obj_in_MINI_MACHINE_ROM

	# i16 32K is plenty for most MINI_MACHINES # hand written ones #
	# i16_i32 # u8_u8_u16_u32_WORD_from_lohi
	API_FETCHED_VAR
	API_UN_FETCHED_VAR #
		# have CODE_THAT_WOULD_HAVE_BEEN_USED #
		# have_CACHE_ASIF_PRE_USED
		# have_CACHE_UNREF_PREFETCH # do_STO # do_not_STO #
		# using u8_u8_u16_u32 # SIGNED # DECODE_EA_EXPR #
		# RETVAL_can_be_any_of { i64_IDX i8_IDX i8_EXPR i8_i8_EXPR }
		# RETVAL applies CXX_AUTO_TYPE_CONV AUTO_TYPE_t RETVAL
		# RETVAL is MULTIVAL "{ OK VALUE }" "{ FAIL TAIL }"
		# VALUE is idx_IDX # "{ ALLOC idx = N ++ }" //
		# VARIABLE is BIND_SCRIPT_to_SESS_VARS

		API_get_EA_of_RETVAL_when VALUE is OBJECT_TYPE_ONE_t _TWO_t
		MENTION cause AUTO IMPORT 
		 CACHE OPTIMISER SNOOPS HERE
		  what's in your pre-fetched ROM
		  oh OK the TOC VFS

	make it compile from Makefile

	WE ARE DOING THIS ** RSN **

		GEN C minimal_CPLUSPLUS

		It includes code to reload the SQL_DB cache STO_later_CACHE
		only sweeps every hour
		only writes every day
		CACHE buffers REMOTE for you as an API

		SEND_ENQ_ACK_BACK _SOON

			each thread has a LOCK on SESS_NOW
			on exit LOCK_COUNT DECR INCR DECL

			avoid REF_COUNTING by not REF_INCR when CALL_FUNC
			expect REF_COUNT_PROVIDED_BY_CALLER
			# and keep until next REPL EDGE # 
			# not all HEAP DATA is tracked like that
			# use an inline function to pick that though
			# and switch over as if NOT NULL use PTR

		Q_CACHE - how we want REMOTE to behave
		Q_CACHE - what we offer to  REMOTE as our API

			if Q_CACHE is trusted_CODE_for_this_sort_of_use

				runs very quick

				OPTION SKIP_on_NULL
				OPTION_STEP_is_CODE "NULL_means_BUILTIN"

			EA_VAR = lookup("VAR_NAME") // STR0 // utf8_L1

			EA_VAL = fetch_EA_ITEM // "VAR_NAME" 

			LIBR += CLAIM_EA_VAR CLAIM_EA_VAL
			LIBR += ITEM_POOL[u16] // hand written mini_machine
			ITEM += GET_ITEM_AT_EXPR("u16") // i15 // on_MINUS _HIGH

		CACHE_VAR 
		 MATCH READ VAR at NOW within TIME_STEP_CLICK_ZONE

		 	at end_of_ERA we list all USED asif locked
		 CLICK_ZONE LHS_EDGE
		 CLICK_ZONE DATA_STEP_HELD += READ_USED_OLD_DATA 
		 CLICK_ZONE DATA_STEP_HELD += READ_USED_NEW_DATA # our write
		 CLICK_ZONE RHS_EDGE
		 MATCH WRITE VAR at NOW within TIME_STEP_CLICK_ZONE

		 	at end of ERA we demand CONFIRM _ONE _TWO _USED
		 	at end of ERA we report CONFIRM _ONE _TWO _MODIFIED

		 OPTIMIST


LOOK_as_if_LOCKED
USED_as_if_LOCKED

KEEP_list_of_USERS_of_OLD_DATA_that_need_

WAIT_for_LIST_of_ACTUALLY_CHANGED_VARS VARS {
	# LIKE when USED_OLD_VAL # OLD_VAL_is_CORRECT
	list_of_typed_VARS_via_NAME "AVAR"
	LIST += PAIR "{ NAME VALUE }"
	# DETECT "Q2 %s Q2"
	# DETECT "Q2 SP %s SP Q2"
	# DETECT "Q2 GAP %s GAP Q2"
	# DETECT "Q2 GAP %s GAP %s GAP Q2" "{ LHS RHS }"  // AUTO_in_DIALECT
	# DETECT "Q2 GAP %s GAP %s GAP Q2" // AUTO_in_DIALECT // VARS LHS RHS //
}

*/

