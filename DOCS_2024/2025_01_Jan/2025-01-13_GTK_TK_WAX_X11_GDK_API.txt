	2025-01-13
	2025-01-13_GTK_TK_WAX_X11_GDK_API.txt

		put any of them into a box and it becomes VNC over X11

			that gives you connectivity anywhere your VPS is

		connect to ABOX over TLS // open_SSL CERTS 
		connect to ABOX over MUX // open_SSL KEYS DB_of_SIGNS

			user password machine_password changes every hour
			
				machine_password
				changes every hour

		X11 connects via a SOCKET, usually $DISPLAY ':0'

			X11_WORKSTATION needs open_GL_CONNECTION # LOCAL #

				need to see what might already work
				WEBGL 
				OPEN_GL_ES_2
				LIBR_GPU

					prog is away from CARD
					so a CACHE skips overload
					refresh all every 2 minutes

					STAND_IN
					PROXY
					FAKE
					CLONE = LOCAL_CLONE_for_REMOTE

					REMOTE is not trusted
					REMOTE is expected # see SCRIPT SOURCE
					REMOTE knows we are a CACHE
					OPTIMISED STEPS in BATCH
					RELAY

				RELAY

			route socket through TLS filter
			route socket through MUX filter // asking for tls_auth

			SESS.SESSION_CONNECTION.MUX.SUB_SESS
			SUB_SESS is a GROUP NEAR LOCN or IDEA or ITEM
			SUB_SESS has just done a RENUMBER of MODULE
			RELOAD or RESTART oe RESUME or START or SKIP 



	GTK_TK_WAX_X11_GDK_API

		GTK	libs_apps/w_win is gtk based
		TK	Tcl/Tk is ARGV based with PARSED_TEXT_TWIGS
		WAX	delayed XLIB X11 // catching up ... rsn
		X11	X11 WIN32 WIN64 SDL2 GTK/GDK tcl_tk
		GDK	GDK GLIB GTK // NON GUI USAGE // IMAGE PROCESSING
		API	VIEW calls DRAW calls WAX_DRAW calls XLIB_PANEL

	API ARGV CMNT OBJV TAIL
	API ARGV LEX IDENT_a1_a2_star _a1 _a2

		_a1 == a1 // let the CPP do the math from ARGS

		MINI_MACHINE ARGV // has_ARGV_abilies // has heap_item
	
	HEAP ITEM  CT_RT += get_SPEC( RET_VAR ) 

		CT_RT += Phrase EXPR ITEM or SCRIPT

		CT_RT += get_SPEC( RET_VAR ) 
		CT_RT SPEC += get_SPEC( RET_VAR ) 

			SPEC_t & SPEC = EXPR = get_SPEC( SPEC )
		OPTION
			cast_RETVAL_to_bool_for_use_in_saying_AM_OK
			if(!RETVAL) return FAIL_FAILED();
			bool _OKAY = RETVAL; // SETTER is CT_RT //
			if(!_OKAY) return FAIL_FAILED(); // AUTO USAGE //
		OPTION
			cast RETVAL TO FALSE ZERO NULL
			cast RETVAL TO TRUE PTR to ITEM_t
			apply template ITEM_t & ITEM = get_ITEM_from_EXPR EXPR
			// VIEW_CODE as ITEM_t * PTR = EXPR //
			// EXPR PTR to ITEM_t // more of an explains
			// CALL MACRO RET_VAL is EA_ITEM // or EA_EXPR 
			// CT_RT catches most DEREF_NULL
			// because were recording that
			// on_DEREF_NULL // beware idx_ZERO_is_PLUS 

	cast_RETVAL_to_bool_for_use_in_saying_AM_OK

		bool was_OK = CALL ARGV SESS XPOS // and BENCH 

		we know that JS likes a good LIST of STMT 
		// everything is pre_parsed
		// this %s is IDX of ITEM in HEAP_one 
		// HEAP_two available for use, somply PROVIDE _two
		// DECL PAIR_HEAP // eg i12_idx_t i12_idx = 0xFFF4 // ZONE
		// HEAP_one_t _one; // 
		// HEAP_two_t _two;
		// MORE<HEAP_two_t> tree_of_HEAP_ITEM_combinations _few;
		// GROW<FSM_HEAP_two_t> a working_MAP_of_tree_of_HEAP_ITEM _HEAP;
		// VAR_POOL // brings own Module and curr SESS to table
		// AUTO mk_AVAR CTOR_ARGS TAIL SCRIPT in ARGV
		// AUTO mk_AVAR CTOR_ARGS TAIL PARSED SCRIPT in ARGV
		// ARGV_SEGMENT A_R_G_S P0P2_

		// RECOMMEND implement as N_BYTES but CALC and DRAW as P1
		// P1 == P0 + 7 // KNOW as SUM of INCR's counted doing it
		// XPOS == P0_xpos // P0 + xpos // xpos ++ // utf8_step xpos

		XPOS {

			P0

				hopefully within STO 
				probably with OBJ_LINK_P0
				DECODE_i64( i32_i32_WORD_PAIR )
				DECODE_i64( i32_WORD_PAIR _one _two )
				DECODE_i8_i8_OPCODE i8_BYTE_B
				BITFIELD_MATH

					CT_RT uses gcc which knows stuff

					ASM_INST_1_cycle ASM_SIGN_EXTEND
					BYTE_to_WORD
					PAIR_to_WORD
					FOUR_to_WORD
					EIGHT_to_WORD

					BYTE_to_PAIR
					BYTE_to_WORD
					BYTE_to_EIGHT

					BYTE_B_to_PAIR
					BYTE_B_to_WORD
					BYTE_B_to_EIGHT

			RESERVED	BYTE_to_BYTE // FILTER ??
			RESERVED	PAIR_to_PAIR // FILTER ??
			RESERVED	WORD_to_WORD
			RESERVED	EIGHT_to_EIGHT

					PAIR_to_BYTE _or_FAIL MK_TABLE_256_STR0
					PAIR_to_PAIR
					PAIR_to_WORD
					PAIR_to_EIGHT

					WORD_to_EIGHT
	
			xpos

			 OFFS_in_bytes_from_P0
		}





