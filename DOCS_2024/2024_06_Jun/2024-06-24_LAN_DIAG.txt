	2024-06-24

	2024_06_Jun
	2024-06-24_LAN_DIAG.txt

		// decode as ARGV DECL_TYPE_NAME DECODE_u64 BITFIELDS_64
		// ARGV is SCRIPT and DECL TAGS and in_LEX_PARSING

		u32_u32 u32_one u32_two {
			u32 u32_ONE;
			u32 u32_TWO;
		}

		u64 BTFIELDS {
			u32 u32_ONE_in_LOW_HALF;
			u32 u32_TWO_in_TOP_HALF;

			remain at u64_LOHI 
			have range of EXPRS to offer MINI_MACHINE
			eg multiple routes to WORD_ONE_BYTE_B
			eg multiple routes to WORD_TWO_BYTE_B
			eg CT_RT invents // DIAG invents // SESS runs DIAG STEP
			eg WORD_TWO_BYTE_B // can be avaoided // _provided
			as WORD_TWO_as_u32_PAYLOAD_TWO // importing typedef

			we mostly use u8_u8_OPCODE of WORD_ONE
			we avoid  use u8_u8_OPCODE of WORD_TWO // count_ZERO ONE

			This is just sorting out the 2 u32_WORDS for CPU_32
			Almost everything fits within a 32_bit world
			Some u31_LIMIT // i32_MINUS // i48_LIMIT //

		}

		i48_PAYLOAD // u47_PLUS i48_MINUS // u49_N // u64_M_N

			OPCODE says it is u48_PAYLOAD
			u48_ is CPU_PTR to a BYTE within a WORD // or ALIGNED
			u48_ is CPU_PTR is caddr_t // void * u48_PAYLOAD 
			u48_ is DATA_OFFS_PTR is caddr_t // void * u48_PAYLOAD 
			// may depend on BASE_LIBR using M1M1 or Z0Z0 at top

			This is directly usable on CPU64 //

				u64_PTR = u48_PAYLOAD = u64_WORD >> 16

			SSA can track changes to u64_WORD
			SSA can track USED as u48_BITFIELD

			This is unusable on CPU32,


		u32_u32 u32_one u32_two {
			u32 u32_ONE;
			u32 u32_TWO;
		}

		u8_u8_u48_LOHI
		u8_u8_u16_u32 // u32_u32 // OPTION provide u32_two.BYTE_B 
		u8_u8_u16_u8_u24

		u48_LOHI is BITFIELD inside u64
		u48_PAYLOAD = u32_WORD >> 8 // SUPPORTED
		i48_PAYLOAD = i32_WORD >> 8 // SIGNED

			MINUS means CHECK_IT
			ZERO_means_NULL
			PLUS_MEANS_IDX idx = u48_PAYLOAD
			PLUS_MEANS_IDX idx = u47_PAYLOAD

	HEAP_of_ITEMS
	 idx_u12_PLUS
	 u12_PLUS
	 u4_PICK_u12_PICK // VIEW as _ADDR or as _IDX or _OFFS or _ITEM or _PICK

	 u12_u4 // SWITCH DIRECTION between u4_u12 and u12_u4 // SAME // DIFF //




	PICK_of_HEAPS
	PICK_of_16_HEAPS
	PICK_of_DOZEN_HEAPS

	HEAP_of_ITEM
	HEAP_of_ITEM_4096 // NAME chosen into BENCH as ALIAS // FIND_in_LIST //

		FIND_in_LIST { SCRIPT } 

			SELECT when LIST_local == LIST_remote
			SELECT when SCRIPT says SO // FILTER_API // 
			// FILTER // SORTED upto_now // LISTED in some order //
			// CSET_ACCEPTED accept_ _utf8 _latin1 _BYTE _CSET 
			// CSET_BYTE works best in EUROPE // FULL_FONT //
			// CSET_FULL_FONT_in_CSET_BYTE
			// SORT_ORDER accept

		LIST_is_COLLECTION_of_STREAMS_with_INCOMING

			CT_RT compiles itself 
			CT_RT uses GEN SCRIPT
			CT_RT writes GEN for SCRIPT for API

				provides CT_RT_api; // PARSED SCRIPT ";" GHOST_EARS

				SEMICOLON EOLN GHOST_EARS ":" ";" "," "EOLN", "INDENT"
				AVAR needs that extra bit BIT_from_SPEC
				AVAR_is_PUNCT // PSG deactivates unused CODE
				AVAR is PUNCT // AUTO_HERE is CALL_ON(idx)
				AVAR_is_TOKEN // use SPELLING // eg STR0 //
				AVAR_is_EXPR // eg 
				AVAR_is_EA_EXPR // eg POOL4.AVAR /* name STR0 */
	EA_YX
	EA_YX replace caddr_t replace void * in_place _as_CPU_WORD _as_MEM_WORD
	EA_YX
	EA_YX u64 { THIS_SCRIPT }
	EA_YX
	EA_YX u8_u8_OPCODE
	EA_YX u16 = u4_HEAP + u12_ITEM // BITFIELDS allowing this loose syntax
	EA_YX u8_HEAP
	EA_YX u24_EA_ITEM //
	EA_YX
	EA_YX ua_u8	BYTE_B BYTE_B _PAYLOAD // CT_RT UNUSED over names vars

 API
 	CT_RT can switch EVAL on
 	CT_RT can attach LIBR using API 

		API_MMAP
		API_MMAP_CHUNKS
		API_CHUNKS_in_STREAM
		API_STREAM

		API_LIBR += Module 


 BATCH 
 STEP
 MULTI_STEP

 	BATCH still loading see on_EVENT ...
 	BATCH fully loaded call on_EVENT CODE_POINT_of_CALLER
 	BATCH fully loaded call on_EVENT

		CODE_POINT_XPOS_HERE { API demands we provide MEM_WORD_64 or two
			XPOS_HERE = XPOS_of_this_line XPOS_BOLN as { FILE OFFS }
			 u8_u8_OPCODE == lookup SCRIPT_and_RUN_it with args
			 u16_ADDR_inside_MINI_MACHINES_DOZEN_MODULES
			 u16_LIBR uses densely packed CT_KNOW_VALUE
			//
			u8_FILE u23_OFFS

			MINI_MACHINES can impose LIMIT of 256 SECTORS per module

			nbytes SECTION[u8] {

				get_NBYTES_for_ITEM_at_IDX( u8_idx )
				set_NBYTES_for_ITEM_at_IDX( u8_idx, nubyes )

				get_NBYTES_for_ITEM_at_IDX( u8_idx, & nbytes )
				set_NBYTES_for_ITEM_at_IDX( u8_idx, & nubyes )

				CT_RT knows it haa a PICK_PAIR or PICK_LIST
				either_get_EA_of_ITEM
				either_get_ITEM_at_EA

				either_get_EA_of_DATA
				either_get_DATA_at_EA
 ALLOC
 ALLOC somewhere here is "{ ADDR = OFFS ; OFFS += NNNN_bytes }" // ALIAS NBYTES
 ALLOC
 ALLOC DIARY_LOG needs it's flippin receipt
 ALLOC DIARY_LOG gets every ITEM in STREAM // MATCH("it's flippin receipt") // FEW
 ALLOC DIARY_LOG gets every ITEM in STREAM // retaining FULL COPY of STREAM //
 // retaining FULL COPY of OUTPUT_STREAM // is_a_STREAM_FILTER_for_MATCH("%s") 
 // MATCH(STR0) // CSET_merger of UTF8_and_UDEF
 // BASIC MUX is LIKE_BY_LINE // PLAIN TEXT SCRIPT WORDS LAND TEXT ext

			}

			and using u8_idx as CSR in TABLE_
		}

		call on_EVENT CODE_POINT_of_CALLER


	EA_YX u24_PAYLOAD
	EA_YX u24_PAYLOAD
	EA_YX u24_PAYLOAD
	EA_YX
	EA_YX
	EA_YX
	EA_YX
	EA_YX



	HEAP_of_4096_ITEM // or_MORE // _or_PLUS // [*] //
	[*] u4_PICK [*] u12_ADDR // _idx // u16_PICK_ADDR // u4_u12 //
	// AUTO_IMPORT Module // MINI_Machine // Module // ITEM // EXPR // STO // SESS

	// AUTO_IMPORT Module // /* AUTO GEN OPTIMISES LOCAL_C_for_EXPR */
	// AUTO_IMPORT // LIBR_ZONE // 
	// Module //
	// MINI_Machine //
	// Module //
	// ITEM //
	// EXPR //
	// STO //
	// SESS //


